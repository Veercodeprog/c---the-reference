// Function templates in C++:
// function blueprint
// function template in c++ used to avoid code duplication.
// function template is a function that is defined with generic type.
//
// the function template are just blueprints .they are not actual functions or
// real code consumed by the compiler. the compiler generates the actual code by
// replacing the template parameters with actual values at compile time. the
// real c++ code generated by the compiler is called function instantiation or
// template insance.
//
// note: multiplying two strings is not possible in c++.will get compile time
// error.

#include <iostream>
int maximum(int x, int y) { return x > y ? x : y; }

std::string maximum(const std::string &x, const std::string &y) {
  return x > y ? x : y;
}

long long int maximum(long long int x, long long int y) {
  return x > y ? x : y;
}

// function body is same for all the data types. to resolve this we can use
// function templates.the function template for above functions is as follows.
//
template <typename T> T maximum(T x, T y) { return x > y ? x : y; }

int main() {
  std::cout << "Function templates in C++" << std::endl;
  int result = maximum(10, 20);
  std::cout << "maximum(10, 20) = " << result << std::endl;
  std::cout << "maximum(10.5, 20.5) = " << maximum(10.5, 20.5) << std::endl;
  std::cout << "maximum('A', 'B') = " << maximum('A', 'B') << std::endl;
  std::cout << "maximum(\"A\", \"B\") = " << maximum("A", "B") << std::endl;

  // we can call the function template with different data types.
  return 0;
}
